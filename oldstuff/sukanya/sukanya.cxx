
#include <iostream>
#include <new>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <complex>

using namespace std;

int main ()
{ 
	const double gama=3.0, fac=0.02;
	int i,nx=100;
	float dx=0.01, x0=0.0, x1=1.0, dg, dg2, xmid, dt=0.003, tend=0.65; 
	float x[100],xi[101],u[100],q1[100],q2[100],q3[100],f1[100],f2[100],f3[100],
	Pr[100],q1new[100],q2new[100],q3new[100]; 

	//-------------------------------------------------------------      
	//-----------SETTING  THE  GRID--------------------------------
	for(i=0; i<nx; i++)
	{
		x[i]=(i-1.)*dx;
	};
	for(i=1; i<nx; i++)
	{
		xi[i]=0.5*(x[i]+x[i-1]);
	};
	xi[0]=x[0] - 0.5*(x[1] - x[0]);
	xi[nx]=x[nx-1]+0.5*(x[nx-1]-x[nx-2]);
	//-------------------------------------------------------------
	//----------ASSIGNING INITIAL CONDITION------------------------
 
	dg = 0.1*(x1 - x0);
	dg2=pow(dg,2);
	xmid = 0.5*(x0 + x1);

	for(i=0; i<nx; i++)
	{
		q1[i] = exp(-(pow((x[i] - xmid),2))/(2.*pow(dg,2)));
		q2[i] = 0.5*q1[i];
		q3[i] = 0.5*q1[i]*fac + 0.5*pow(q2[i],2)/q1[i];
	};
	//--------------------------------------------------------------
	//--------------ADVECTION---------------------------------------
 
	for(float t=0.0; t<=tend; t=t+dt)
	{
		//--------------------------------------------------------------
		//----------PERIODIC BOUNDART CONDITION-------------------------    
		q1[-1]  =q1[nx-1]; 
		q1[0]   =q1[nx]; 
		q1[nx+1]=q1[1];
		q1[nx+2]=q1[2];
     
		q2[-1]  =q2[nx-1];
		q2[0]   =q2[nx];
		q2[nx+1]=q2[1];
		q2[nx+2]=q2[2];
     
		q3[-1]  =q3[nx-1];
		q3[0]   =q3[nx];
		q3[nx+1]= q3[1];
		q3[nx+2]= q3[2];
		//--------------------------------------------------------------
		//---------------SETTING  VELOCITY & PRESSURE-------------------
      
		for(i=0; i<nx; i++)
		{
			u[i]=fac*t*(x[i]-xmid)/(fac*pow(t,2)+dg2);     
			//     u[i] = (q2[i]/q1[i] + q2[i - 1]/q1[i - 1])/2.;
			Pr[i] = (gama - 1.)*(q3[i] - 0.5*pow(q2[i],2)/q1[i]);
		};
		//--------------------------------------------------------------         
     
		for(i=0; i<=nx; i++)
		{
			if (u[i] >= 0)
			{
				f1[i] = q1[i - 1]*u[i] + (u[i]/4.)*(1. - u[i]*dt/dx)*(q1[i] - q1[i - 2]);
				f2[i] = q2[i - 1]*u[i] + (u[i]/4.)*(1. - u[i]*dt/dx)*(q2[i] - q2[i - 2]);
				f3[i] = q3[i - 1]*u[i] + (u[i]/4.)*(1. - u[i]*dt/dx)*(q3[i] - q3[i - 2]);
			} 
			else
			{
				f1[i] = q1[i]*u[i] - (u[i]/4.)*(1. + u[i]*dt/dx)*(q1[i + 1] - q1[i - 1]);
				f2[i] = q2[i]*u[i] - (u[i]/4.)*(1. + u[i]*dt/dx)*(q2[i + 1] - q2[i - 1]);
				f3[i] = q3[i]*u[i] - (u[i]/4.)*(1. + u[i]*dt/dx)*(q3[i + 1] - q3[i - 1]);
			};
		};
    
		for(i=1; i<=nx; i++)
		{
			q1new[i]=q1[i]-dt*(f1[i+1]-f1[i])/(xi[i+1]-xi[i]);
			q2new[i]=q2[i]-dt*(f2[i+1]-f2[i])/(xi[i+1]-xi[i])-(dt/(2.*dx))*(Pr[i+1]-Pr[i-1]);
			q3new[i]=q3[i]-dt*(f3[i+1]-f3[i])/(xi[i+1]-xi[i])-(dt/(2.*dx))*(Pr[i+1]*u[i+1]-Pr[i-1]*u[i-1]);
         
			q1[i] = q1new[i];
			q2[i] = q2new[i];
			q3[i] = q3new[i];
        
		};
	}; 

	for(i=1; i<=nx; i++)
	{
		printf("%g %g\n",x[i], u[i]);    //q1[i], q3[i]);
	}; 

}

//-----------------------------------------------------------------------------------------

